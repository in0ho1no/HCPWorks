\module highlight-test
    \data 関数への入力
    \data 関数からの出力
    \data 判定した状態
    \data 現在の状態
    \data 入力値に応じた状態

    着色イメージ確認用のモジュール \in 関数への入力 \out 関数からの出力
        前処理
            初期化する
                0クリアする
                    判定後の状態を0にしておく \out 判定した状態
                現在値を取得する
                    \mod DBから現在地を取得する  \out 現在の状態
            入力に基づいた初期値を用意する
                \fork 入力値がXXXである \in 関数への入力
                    \true 条件を満足する
                        初期値---を設定する \out 入力値に応じた状態
                    \false 条件を満足しない
                        初期値oooを設定する \out 入力値に応じた状態

        メイン処理
            状態が変化したら専用の処理を行う
                \fork 状態変化を確認する \in 現在の状態 \in 入力値に応じた状態
                    \branch ポジティブな変化
                        \repeat 8回繰り返す
                            1bit右シフトする
                            \fork 最下位bitの状態を判定する
                                \true 最下位bitがONである
                                    判定成功とみなす \out 判定した状態
                                    \return 繰り替えしを終える
                                \false 最下位bitがOFFである
                                    判定を続ける

                    \branch ネガティブな変化
                        判定失敗とみなす \out 判定した状態
                    \branch 変化なし
                        何もしない
        後処理
            処理を終了する
                \return 結果を返す \in 判定した状態 \out 関数からの出力

\module モジュ1
    \data データ1
        \data データ1-1
        \data データ(AAA)
        \data データ(種類)
    \data データ2
    \data データ3

    処理開始
    処理レベル0-1
    処理レベル0-2
        必要な情報を揃える
            排他を取得
            \repeat DBから取得 \in データ1 \out データ2 \out データ(AAA)
            排他を解放
            機能Bの実行
                機能Bの前処理
                機能Bの後処理
                \return 2
        処理終了
            戻り値を返す
                \return TRUE(成功値) 固定

\module モジュ2
    \data bbb
    \data データaaa

    シンプルな処理
        初期化
            \mod 何もしない \in bbb 
        メイン処理
            何もしない \out データaaa
        後処理
            何もしない
